# Project Rules

## Dependency Installation
- Always use `npm install --legacy-peer-deps` when installing packages
- This project has peer dependency conflicts (specifically with date-fns versions)
- The --legacy-peer-deps flag resolves these without breaking functionality

## Development Commands
- Use `npm run dev` to start the development server
- Project runs on http://localhost:3000

## Firebase Configuration
- Firebase project: "Portfolio" (portfolio-8aca6)
- Services used: Authentication, Firestore, Storage
- Configuration stored in `lib/firebase.ts`
- Project ID: portfolio-8aca6
- Storage bucket: portfolio-8aca6.firebasestorage.app

## Architecture Decisions
- Keep it simple: One template, AI-first approach
- No dual directory structure - everything in correct place from start
- Template as React component, not HTML files
- Generated portfolios saved as static files in `/public/portfolios/[id]/`
- Same behavior in localhost and production

## AI Portfolio Generation
- Uses 3-agent system: TextExtractor → InformationParser → ContentGenerator
- API route at /api/generate handles CV processing
- **Only supports Word documents (.docx)** - PDF support removed due to compatibility issues
- Portfolios saved to /public/portfolios/[id]/index.html
- OpenAI API key required in .env.local or environment variables

## AI Content Generation Rules
### About Section Rules:
- **Length**: 150-200 words
- **Style**: Write in first person, starting with "Hello! I'm [name]..."
- **Tone**: Conversational and genuine, avoid flowery language
- **Content**: Focus on current role/studies, key achievements, passions, what drives them
- **Format**: Like introducing yourself to a colleague, not marketing copy

### Small Intro/Tagline Rules:
- **Length**: 10-15 words maximum
- **Style**: Clear, professional tagline that captures expertise
- **Format**: Straightforward, no dramatic language

### Project Description Rules:
- **Length**: **MUST be 45-60 words**
- **Content**: Must explain what it does, technologies used, and impact/outcome
- **Style**: Engaging and specific
- **Expansion**: If CV has brief descriptions, AI must expand them to meet word count
- **Focus**: Problem solved, technologies used, and impact

### Skills Filtering:
- **Include**: ONLY technical skills (programming languages, frameworks, tools)
- **Exclude**: Spoken languages (English, Spanish, French, etc.) and soft skills
- **Format**: Convert to skill objects with appropriate level

### Title Cleaning:
- **Remove**: "Intern" from any job titles automatically
- **Use**: Core title only (e.g., "Software Developer" instead of "Software Developer Intern")

### Project Generation Logic:
- If CV has projects → Use actual project names and expand descriptions
- If no projects found → Create exactly 3 sample projects based on skills
- Each project must be realistic and relevant to their field

### AI Model Selection:
- **Parsing**: GPT-3.5-turbo with temperature 0.1 (cost-efficient, consistent)
- **Content Generation**: GPT-4 with temperature 0.7 (better creative content)

## Firebase Storage Setup
- Storage bucket must be initialized in Firebase Console before use
- Project must be on Blaze plan for Firebase Storage
- Storage bucket URL format: portfolio-8aca6.firebasestorage.app
- If getting 404 errors, check that storage is enabled in console
- CV files uploaded to: users/{userId}/portfolios/{portfolioId}/cv.{extension}
- **IMPORTANT**: Update Firebase Storage rules to allow authenticated users to upload and public read for CV downloads:
  ```
  rules_version = '2';
  service firebase.storage {
    match /b/{bucket}/o {
      match /users/{userId}/portfolios/{portfolioId}/{allPaths=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow read: if true; // Allow public read for CV downloads
      }
      match /portfolios/{portfolioId}/{allPaths=**} {
        allow read: if true;
      }
    }
  }
  ```

## Firestore Security Rules
- **IMPORTANT**: Must configure Firestore rules to allow users to create/update portfolios
- Go to Firebase Console → Firestore Database → Rules
- Required rules:
  ```
  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      // Allow users to read/write their own portfolios
      match /users/{userId}/portfolios/{portfolioId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow users to read/write their own user document
      match /users/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
  ```
- Without these rules, users will get "Missing or insufficient permissions" errors

## Portfolio Editing System
- After CV upload, users are redirected to `/portfolio/[id]/edit` to edit their portfolio
- Text content is made editable using contenteditable attributes
- Save button appears at top right of the portfolio (positioned at top: 80px to avoid covering dark/light mode toggle)
- Initial portfolio saved as `index.html` (draft version)
- Final edited portfolio saved as `final.html` (published version)
- Portfolio viewer checks for `final.html` first, falls back to `index.html`
- Profile picture upload: Click on profile images to upload new ones during editing
- **IMPORTANT**: Use `.editing-mode` class for all editing-only styles (like "Change Photo" overlays) to prevent them from appearing in final saved portfolios
- When saving, remove `editing-mode` class, onclick handlers, contenteditable attributes, AND completely remove all editing-specific CSS rules and scripts from the HTML
- **CRITICAL**: Don't just remove classes - completely strip out editing CSS and JavaScript to ensure clean final portfolios
- **CSS REMOVAL**: Only remove editing-specific CSS patterns - preserve base styles like `.project-image img` that maintain layout consistency

## Portfolio Features
- **Download CV Button**: Appears next to Contact button when CV is available
- **CV Upload**: Client-side upload to Firebase Storage for proper authentication
- Server returns CV data as base64, client uploads and updates portfolio HTML
- CV stored at: `users/{userId}/portfolios/{portfolioId}/cv.{extension}`
- Public download access via Firebase Storage rules

## Common Issues
- If you get ERESOLVE errors during npm install, use --legacy-peer-deps flag
- Make sure all components are properly imported with correct paths (use @/ for root imports) 
- Firebase Storage requires Blaze plan - check console if uploads fail
- OpenAI API key must be set in .env.local for portfolio generation 
- Firebase Admin SDK needs proper authentication setup with service account credentials for production use. For development, we can skip database saves initially.
- **Firebase Storage Infinite Retries**: Use timeouts with Promise.race() to prevent infinite retry loops when files don't exist
- **CORS Issues**: Use Firebase SDK `getBytes()` instead of `fetch()` for Firebase Storage downloads
- **CV Upload Permissions**: Always upload CV files from client-side with authenticated user context, not from server-side API routes
- **Content Type for File Uploads**: When uploading files to Firebase Storage with `uploadBytes()`, always specify the `contentType` metadata. For PDFs: `contentType: 'application/pdf'`, for images: `contentType: 'image/jpeg'` or `'image/png'`, etc. This prevents files from being saved with incorrect MIME types that make them unreadable.

## Deployment on Netlify
- **CRITICAL**: Next.js API routes don't work with `output: 'export'` (static export)
- Remove `output: 'export'` from next.config.mjs for API routes to work
- Use publish directory: `.next` (not `out`)
- **File System Issue**: Cannot write files to public directory on serverless platforms
- Solution: Return HTML from API and save to Firebase Storage client-side
- **Function Size Limit**: Netlify has 250 MB limit for serverless functions
- **Heavy Dependencies**: mammoth, openai, firebase-admin can exceed size limit
- **Solutions for Size Issue**:
  1. Use Vercel instead (better Next.js support, larger function limits)
  2. Move text extraction to client-side with `/api/generate-light`
  3. Optimize netlify.toml with selective node_modules inclusion
  4. Use external APIs for document processing
- **Required Environment Variables**:
  - `OPENAI_API_KEY` (must be actual key, not placeholder)
  - All `NEXT_PUBLIC_FIREBASE_*` variables
  - Firebase Admin variables (if using server-side Firebase)
- **Firebase Auth**: Add Netlify domain to Firebase Console → Authentication → Settings → Authorized domains

## Deployment on Vercel (Recommended)
- **Better for Next.js**: Native support, larger function limits (up to 50MB)
- **Function Timeout**: Up to 60 seconds on free tier
- **Environment Variables**: Set in Vercel dashboard or use vercel.json
- **Deploy Command**: `vercel --prod` or connect GitHub repo
- **Configuration**: Use vercel.json for custom settings

## API Timeout Handling
- **Netlify Free Tier**: 10 second function timeout limit
- **Netlify Pro**: 26 second function timeout limit
- **Vercel Free**: 10 second timeout, but better function optimization
- **Vercel Pro**: 60 second timeout
- Set `maxDuration` in API routes (we use 60s but it's capped by plan)
- OpenAI API timeouts:
  - Parsing (GPT-3.5): 25 seconds
  - Content Generation (GPT-4): 30 seconds
- **Fallback Strategy**: If GPT-4 times out, automatically fallback to GPT-3.5
- Create `netlify.toml` for proper configuration
- In development, timeouts are less strict 
- **Client-Side Text Extraction**: For deployment, use `/api/generate-light` with client-side text extraction via mammoth.js to avoid serverless function timeouts. The regular `/api/generate` takes 45+ seconds and will timeout on free hosting tiers. 